{"version":3,"file":"static/js/266.d85c6140.chunk.js","mappings":"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","sources":["webpack://react-way-of-samurai/./src/pages/Chat/Chat.module.css?3fbe","pages/Chat/Chat.tsx","pages/Chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"Chat_avatar__6946N\",\"chatContainer\":\"Chat_chatContainer__8bElP\",\"input\":\"Chat_input__hjPy3\",\"sendBtn\":\"Chat_sendBtn__6GljC\",\"inputAndSendArea\":\"Chat_inputAndSendArea__gYvMT\",\"nameAndImage\":\"Chat_nameAndImage__y2nYs\",\"message\":\"Chat_message__YUYC6\"};","import React, {FC, useEffect, useRef, useState, UIEventHandler, memo} from \"react\";\nimport {Avatar, Button, Input} from \"antd\";\nimport s from \"./Chat.module.css\";\nimport {see} from \"../../utils/object-helpers.ts\";\nimport {AppDispatchType, ChatMessagePropsType, ChatMessageAPIType, WebSocketChannelType} from \"../../types/types.ts\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {ChatMessageType, sendMessage, startMessageListening, stopMessageListening} from \"../../redux/chat-reducer.ts\";\nimport {getMessages, getStatus, getWebSocketStatus} from \"../../redux/selectors/selectors.ts\";\n\n\n\n// ChatMessageType\nconst Chat: FC = () => {\n    const dispatch: AppDispatchType = useDispatch();\n    const status = useSelector(getStatus);\n\n    useEffect(() => {\n        dispatch(startMessageListening())\n        return () => {\n            dispatch(stopMessageListening()); // Clean up;\n        }\n    }, []);\n\n    const [name, setName] = useState('Michael');\n\n\n    return <div className={s.chatContainer}>\n        <h1>General Chat</h1>\n        <p>If the chat is not showing yet, please reload the page!</p>\n        {status === 'error'\n            ? <div>Some error occured, Please refresh the page;</div>\n            : <>\n                <Messages/>\n                <AddMessage/>\n            </>\n        }\n    </div>\n}\n\nconst Messages: FC = () => {\n    // SELECTORS:\n    const messages = useSelector(getMessages);\n    // CREATING A REF (to implement auto-scrolling):\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\n    // CREATING A LOCAL STATE FOR AUTO-SCROLL\n    const [autoScroll, setAutoScroll] = useState(true);\n\n    function scrollHandler(e: any) {\n        let element = e.currentTarget;\n\n        if (element.scrollHeight - element.scrollTop === element.clientHeight) {\n            see('>>>> USER SCROLLED TILL THE END OF THE VIEW-SCREEN');\n            setAutoScroll(true)\n        }\n        else {\n            see('>>> USER IS SCROLLING');\n            // setAutoScroll && setAutoScroll(false);\n        }\n    }\n\n    useEffect(() => {\n        // [!] IMPLEMENTING AUTO SCROLLING:\n        if (autoScroll) {\n            messagesAnchorRef.current?.scrollIntoView({behavior: \"smooth\"})\n        }\n    }, [messages]);\n\n    return <div style={{height: '500px', overflowY: \"auto\"}}\n                onScroll={scrollHandler}\n            >\n        {\n            messages\n                .map((m: ChatMessageType, index) =>\n                    <Message key={m.id} message={m}/>)\n        }\n        <div ref={messagesAnchorRef}>\n\n        </div>\n    </div>\n}\n\nconst Message: FC<ChatMessagePropsType> = memo( ({message}) => {\n    return (\n        <>\n            <div className={s.nameAndImage}>\n                <img src={message.photo} className={s.avatar}/>\n                <b>{message.userName}</b>\n            </div>\n\n            <br/>\n            <p className={s.message}>{message.message}</p>\n            <hr/>\n        </>\n    )\n});\n\nconst AddMessage: FC = () => {\n    // LOCAL STATES: we use a local state to get the message from the prompt + handling BUTTON\n    const [message, setMessage] = useState('');\n    const dispatch: AppDispatchType = useDispatch();\n    const status = useSelector(getWebSocketStatus);\n\n    function handleKeyPress (event) {\n        // Function to send a message just by pressing enter;\n        if (event.key === 'Enter' && message.trim() !== '') {\n            sendMessageHandler(); // Call the sendMessageHandler when Enter key is pressed and message is not empty\n        }\n    }\n\n    function sendMessageHandler() {\n        if (!message) { return } // no message ? do NOTHING;\n        dispatch(sendMessage(message)) // dispatching a Thunk;\n        setMessage('') // nullifying prompt\n    }\n\n    return (\n        <div>\n            <div className={s.inputAndSendArea}>\n                <Input\n                    className={s.input}\n                    onChange={(e) => setMessage(e.currentTarget.value)}\n                    value={message}\n                    onPressEnter={handleKeyPress}\n                >\n                </Input>\n                <Button size={\"large\"}\n                    onClick={sendMessageHandler}>\n                    Send\n                </Button>\n            </div>\n        </div>\n    );\n}\n\n\nexport default Chat;","import React, {ComponentType} from \"react\";\nimport {FC} from \"react\";\nimport withRouter from \"../../hoc/withRouter.tsx\";\nimport {compose} from \"redux\";\nimport {withSuspense} from \"../../hoc/withSuspense.tsx\";\nimport withAuthRedirect from \"../../hoc/withAuthRedirect.tsx\";\nimport Chat from \"./Chat.tsx\";\n\nconst ChatPage: FC = () => {\n\n    return (\n       <div>\n            <Chat />\n       </div>\n    );\n}\n\nexport default compose<ComponentType>(\n    // 􀄨\n    withRouter,\n    // 􀄨\n    withSuspense,\n    // 􀄨\n    withAuthRedirect\n)(ChatPage);"],"names":["Messages","messages","useSelector","getMessages","messagesAnchorRef","useRef","_useState3","useState","_useState4","_slicedToArray","autoScroll","setAutoScroll","useEffect","_messagesAnchorRef$cu","current","scrollIntoView","behavior","_jsxs","style","height","overflowY","onScroll","e","element","currentTarget","scrollHeight","scrollTop","clientHeight","see","children","map","m","index","_jsx","Message","message","id","ref","memo","_ref","_Fragment","className","s","src","photo","userName","AddMessage","_useState5","_useState6","setMessage","dispatch","useDispatch","getWebSocketStatus","sendMessageHandler","sendMessage","Input","onChange","value","onPressEnter","event","key","trim","Button","size","onClick","status","getStatus","startMessageListening","stopMessageListening","_useState","_useState2","compose","withRouter","withSuspense","withAuthRedirect","Chat"],"sourceRoot":""}