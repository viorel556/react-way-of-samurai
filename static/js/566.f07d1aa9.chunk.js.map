{"version":3,"file":"static/js/566.f07d1aa9.chunk.js","mappings":"sMACA,EAAmC,sCAAnC,EAAwF,kCAAxF,EAAsL,kCAAtL,EAA2O,sCAA3O,EAAgS,kCAAhS,EAA0V,2CAA1V,EAA8Y,4BAA9Y,EAAob,6BAApb,EAAge,kCAAhe,EAA+gB,gC,mBC0D/gB,EAhD+C,SAACA,GAE5C,IAAAC,GAA8BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAxCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAC1BI,GAA0BL,EAAAA,EAAAA,UAASF,EAAMQ,QAAOC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAA3CC,EAAMC,EAAA,GAAEC,EAASD,EAAA,IAEtBE,EAAAA,EAAAA,YAAU,WACND,EAAUV,EAAMQ,OACpB,GAAG,CAACR,EAAMQ,SAiBV,OACII,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAeC,SAAA,EACzBV,IACEW,EAAAA,EAAAA,KAAA,OAAAD,UACIH,EAAAA,EAAAA,MAAA,QAAMK,cAjBG,WACrBX,GAAY,EAChB,EAesDS,SAAA,EAEnCC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,aAAY,IAAEf,EAAMQ,QAAU,YAAY,UAIvDH,IACGW,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,SACIE,OAvBO,WACvBZ,GAAY,GACZN,EAAMmB,eAAeX,EACzB,EAqBoBY,SAlBG,SAACC,GACpBX,EAAUW,EAAEC,cAAcC,MAC9B,EAkBoBA,MAAOf,QAM/B,E,6BCQagB,GACTC,EAAAA,EAAAA,GAAkC,CAACC,KAAM,gBAAzCD,EArDA,SAD4EE,GACvC,IAAnCC,EAAYD,EAAZC,aAAcC,EAAOF,EAAPE,QAASC,EAAKH,EAALG,MAEzB,OACIlB,EAAAA,EAAAA,MAAA,QAAMmB,SAAUH,EAAab,SAAA,EAEzBH,EAAAA,EAAAA,MAAA,OAAAG,SAAA,CAAK,KAACC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,WAAe,OAC5Be,IACGd,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAyBC,SACpCe,KAITlB,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,iBAECiB,EAAAA,EAAAA,IAAY,YAAa,WAAY,GAAIC,EAAAA,QAIjDrB,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,yBAECiB,EAAAA,EAAAA,IAAY,GAAI,iBAAkB,GAAIC,EAAAA,GAAO,CAACC,KAAM,iBAI5DtB,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,8BAECiB,EAAAA,EAAAA,IAAY,yBAA0B,4BAA6B,GAAIG,EAAAA,QAI/EvB,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gBAECiB,EAAAA,EAAAA,IAAY,WAAY,UAAW,GAAIG,EAAAA,QAI/CvB,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,eAAc,IAAEqB,OAAOC,KAAKR,EAAQS,UAAUC,KAAI,SAAAC,GACrD,OAAOxB,EAAAA,EAAAA,KAAA,OAAeH,UAAWC,EAAqBC,UAClDH,EAAAA,EAAAA,MAAA,KAAAG,SAAA,CAAIyB,EAAI,MAAGR,EAAAA,EAAAA,IAAYQ,EAAK,YAAYA,EAAK,GAAIP,EAAAA,IAAO,QAD3CO,EAGrB,SAKZ,ICKaC,EAAc,SAAHC,GAA0C,IAArCb,EAAOa,EAAPb,QAASc,EAAOD,EAAPC,QAASC,EAAYF,EAAZE,aAC3C,OACIhC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAA8BC,SAAA,EAE1CC,EAAAA,EAAAA,KAAA,MAAAD,SAAKc,EAAQgB,YAEbjC,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,eAAc,IAAEc,EAAQiB,SAAW,UAG1ClC,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,uBAAsB,IAAEc,EAAQkB,eAAiB,MAAQ,SAGhEnC,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,6BAA4B,IAAEc,EAAQkB,eAAiBlB,EAAQmB,0BAA4B,OAGlGpC,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACIC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,eAAc,IAAEqB,OAAOC,KAAKR,EAAQS,UAAUC,KAAI,SAAAC,GACrD,OAAOxB,EAAAA,EAAAA,KAACiC,EAAO,CAACC,aAAcV,EAAKW,aAActB,EAAQS,SAASE,IACtE,OAGCG,IAAW3B,EAAAA,EAAAA,KAAA,OAAAD,UACRC,EAAAA,EAAAA,KAAA,UAAQH,UAAWC,EAAiBsC,QAASR,EAAa7B,SAAC,qBAI3E,EAGakC,EAAU,SAAHI,GAAsC,IAAjCH,EAAYG,EAAZH,aAAcC,EAAYE,EAAZF,aAEnC,OAAOvC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAqBC,SAAA,EAACC,EAAAA,EAAAA,KAAA,KAAAD,SAAImC,IAAiB,KAAGC,EAAa,MACtF,EAEA,EApFmC,SAAHxB,GAK0B,IALrBE,EAAOF,EAAPE,QACGrB,EAAMmB,EAANnB,OACAW,EAAcQ,EAAdR,eACAwB,EAAOhB,EAAPgB,QACAW,EAAS3B,EAAT2B,UACAC,EAAW5B,EAAX4B,YAEpCtD,GAA8BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAxCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAE1B,IAAK0B,EAAW,OAAOb,EAAAA,EAAAA,KAACwC,EAAAA,EAAS,IAUjC,OACIxC,EAAAA,EAAAA,KAAA,OAAAD,UACIH,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAyBC,SAAA,EACrCH,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAqBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,OAAKyC,IAAK5B,EAAQ6B,OAAOC,OAASC,EAAW/C,UAAWC,KACxDE,EAAAA,EAAAA,KAAC6C,EAAsB,CAACrD,OAAQA,EAAQW,eAAgBA,KAExDH,EAAAA,EAAAA,KAAA,OAAAD,SACM4B,IAEE/B,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACIC,EAAAA,EAAAA,KAAA,SAAOkB,KAAK,OAAO4B,GAAG,YAAYjD,UAAWC,EAAsBM,SAnBnE,SAACC,GACrBA,EAAE0C,OAAOC,OAASV,EAAUjC,EAAE0C,OAAOC,MAAM,GACnD,KAkB4BhD,EAAAA,EAAAA,KAAA,SAAOiD,QAAQ,YAAYpD,UAAWC,EAAmBC,SAAC,0BAM1EC,EAAAA,EAAAA,KAAA,OAAAD,SACKV,GACKW,EAAAA,EAAAA,KAACQ,EAAoB,CAACO,SAxB3B,SAACmC,GACdX,EAAYW,GAAUC,MAAK,kBAAM7D,GAAY,EAAM,GACvD,EAsBgE8D,cAAevC,EAASA,QAASA,KAC3Eb,EAAAA,EAAAA,KAACyB,EAAW,CAACZ,QAASA,EAASc,QAASA,EAASC,aAAc,kBAAMtC,GAAY,EAAK,UAKhH,E,0DCjEA,EAAgE,4BAAhE,EAAoG,uBAApG,EAA2I,+BAA3I,EAA0L,+BCA1L,EAAuD,mBAAvD,EAAoF,sBAApF,EAA4H,8BCwB5H,EAhB2B,SAACN,GAExB,OACIgB,EAAAA,EAAAA,KAAA,OAAAD,UACIH,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAaC,SAAA,EACzBH,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAwBC,SAAA,EACpCC,EAAAA,EAAAA,KAAA,OAAKyC,IAAKG,KACV5C,EAAAA,EAAAA,KAAA,KAAGH,UAAWC,EAAgBC,SAAGf,EAAMqE,cAG3CzD,EAAAA,EAAAA,MAAA,QAAAG,SAAA,CAAM,IAAEf,EAAMsE,MAAM,iBAIpC,E,oBCMA,GAF4B7C,EAAAA,EAAAA,GAAU,CAACC,KAAM,yBAAjBD,EAlB6B,SAACzB,GACtD,OACIgB,EAAAA,EAAAA,KAAA,QAAMe,SAAU/B,EAAM4B,aAAab,UAC/BH,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACIC,EAAAA,EAAAA,KAACuD,EAAAA,EAAK,CAACC,UAAWrC,EAAAA,GACXsC,KAAK,cACLC,SAAU,CAACC,EAAAA,GAAUC,EAAAA,EAAAA,GAAiB,KACtCC,YAAY,kBACZhE,UAAWC,KAGlBE,EAAAA,EAAAA,KAAA,UAAQH,UAAWC,EAAsBC,SAAC,iBAI1D,I,UCbO+D,EAAwBC,EAAAA,GAAxBD,qBAwCP,EApCoBE,EAAAA,MAAW,SAAAhF,GAC3B,IAAMiF,GAAWC,EAAAA,EAAAA,KAGXC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,KACND,EAAAA,EAAAA,IAAYE,EAAAA,IAOhC,IAAIC,EACAJ,EAAM5C,KAAI,SAAAiD,GAAG,OAAIxE,EAAAA,EAAAA,KAACyE,EAAI,CAAcpB,QAASmB,EAAInB,QAASC,MAAOkB,EAAIE,YAAzCF,EAAI1B,GAAkD,IAOtF,OACIlD,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAmBC,SAAA,EAE/BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBAEJC,EAAAA,EAAAA,KAAC2E,EAAmB,CAAC5D,SAVb,SAAC6D,IARjB,SAAiBC,GACbZ,EAASH,EAAqBe,GAClC,CAOIC,CAAQF,EAAOC,aACfD,EAAOC,YAAc,EACzB,KASQ7E,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAcC,SACzBwE,MAKjB,IC/CA,EAA+D,2BCkE/D,GAAeQ,EAAAA,EAAAA,IAEXC,EAAAA,EAEAC,EAAAA,EAJJ,EAxCmC,SAACjG,GAChC,IAAMiF,GAAWC,EAAAA,EAAAA,KAejB,IAAMrD,GAAUuD,EAAAA,EAAAA,IAAYc,EAAAA,IACtBC,GAAmBf,EAAAA,EAAAA,IAAYgB,EAAAA,IAC/B5F,GAAS4E,EAAAA,EAAAA,IAAYiB,EAAAA,IACrBC,EAAgBtG,EAAMuG,OAAOC,OAAOC,OACpC9D,EAlBN,SAAqBwD,EAA0BG,GAG3C,OADKA,IAAiBA,EAAgBH,GAC/BA,IAAqBG,CAChC,CAcgBI,CAAWP,EAAkBG,GAM7C,OAJA3F,EAAAA,EAAAA,YAAW,YAfX,WACI,IAAI8F,EAASzG,EAAMuG,OAAOC,OAAOC,OAC5BA,IAAUA,EAASN,GAExBlB,GAAS0B,EAAAA,EAAAA,IAAQF,IACjBxB,GAAS2B,EAAAA,EAAAA,IAAcH,GAC3B,CAUII,EACJ,GAAG,KAGCjG,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAkBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAC8F,EAAW,CAACjF,QAASA,EACTc,QAASA,EACTnC,OAAQA,EACR+C,YAAaA,EAAAA,GACbpC,eAAgBA,EAAAA,GAChBmC,UAAWA,EAAAA,MAExBtC,EAAAA,EAAAA,KAAC+F,EAAO,MAGpB,G","sources":["webpack://react-way-of-samurai/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://react-way-of-samurai/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react-way-of-samurai/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","webpack://react-way-of-samurai/./src/components/Profile/Profile.module.css?b512","components/Profile/ProfilePage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__XBXuJ\",\"profileImage\":\"ProfileInfo_profileImage__5Evr1\",\"jobChecker\":\"ProfileInfo_jobChecker__Fd+06\",\"contactStyle\":\"ProfileInfo_contactStyle__qxcbv\",\"formSummaryError\":\"ProfileInfo_formSummaryError__YIVIc\",\"imageSection\":\"ProfileInfo_imageSection__GBMML\",\"profileDetailsSection\":\"ProfileInfo_profileDetailsSection__LOSFf\",\"status\":\"ProfileInfo_status__YrBI5\",\"editBtn\":\"ProfileInfo_editBtn__ckmIr\",\"editImgInput\":\"ProfileInfo_editImgInput__U5bol\",\"editImgBtn\":\"ProfileInfo_editImgBtn__ZwGEo\"};","import React, {FC, useEffect, useState} from \"react\";\nimport classes from \"../ProfileInfo.module.css\"\n\n//<ProfileStatusWithHooks status={status} updateMyStatus={updateMyStatus}/>\n\ntype PropsType = {\n    status: string\n    updateMyStatus: (status: string) => void\n}\n\n\nconst ProfileStatusWithHooks: FC<PropsType>  = (props) => {\n    // THIS IS A HOOK:\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status] );\n\n\n    // FUNCTIONAL \"editMode\"\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateMyStatus(status);\n    }\n\n    // FUNCTIONAL \"status\"\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div className={classes.status}>\n            {!editMode &&\n                <div>\n                    <span onDoubleClick={activateEditMode}>\n\n                       <b>Status: </b> {props.status || \"---------\"}  </span>\n                </div>\n            }\n\n            {editMode &&\n                <div>\n                    <input\n                        onBlur={deactivateEditMode}\n                        onChange={onStatusChange}\n                        // autoFocus={true}\n                        value={status}\n                    />\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default ProfileStatusWithHooks;\n","import React, {FC} from \"react\";\nimport classes from \"./ProfileInfo.module.css\";\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {ProfileType} from \"../../../types/types.ts\";\n\n  // FIXME[HARD](***): I FUCKING HATE THIS; MAJOR REFACTORING REQUIRED;\n // just put all this shit in settings and make separate functional (api & thunks) for each piece of data;\n// at the end of the day nobody edits their profile BY SUBMITTING A FUCKING FORM really; You do it with each piece of data;\n\ntype PropsType = { profile: ProfileType }\n\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> =\n    ({handleSubmit, profile, error}) => {\n\n    return (\n        <form onSubmit={handleSubmit}>\n\n            <div> <button> SAVE </button> </div>\n            {error && // UI HANDLING OF THE ERROR OF WRONG EMAIL/PASS\n                <div className={classes.formSummaryError}>\n                    {error}\n                </div>\n            }\n\n            <div>\n                <b>Full name: </b>\n                {\n                    createField(\"Full Name\", \"fullName\", [], Input)\n                }\n            </div>\n\n            <div>\n                <b>Looking for a job: </b>\n                {\n                    createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})\n                }\n            </div>\n\n            <div>\n                <b>My professional skills: </b>\n                {\n                    createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)\n                }\n            </div>\n\n            <div>\n                <b>About me: </b>\n                {\n                    createField(\"About me\", \"aboutMe\", [], Textarea)\n                }\n            </div>\n\n            <div>\n                <b>Contacts: </b> {Object.keys(profile.contacts).map(key => {\n                return <div key={key} className={classes.contactStyle}>\n                    <b>{key}: {createField(key, 'contacts.'+key, [], Input)} </b>\n                </div>\n            })}\n            </div>\n\n        </form>\n    );\n}\n\nexport const ProfileDataReduxForm =\n    reduxForm<ProfileType, PropsType>({form: \"edit-profile\"})(ProfileDataForm);","import React, {ChangeEvent, FC, useState} from \"react\";\nimport classes from './ProfileInfo.module.css';\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatus/ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/images/user.png\";\nimport {ProfileDataReduxForm} from \"./ProfileDataForm.tsx\";\nimport {ProfileType} from \"../../../types/types.ts\";\nimport {Button} from \"antd\";\n\ntype PropsType = {\n    profile: ProfileType\n    status: string\n    isOwner: boolean\n    updateMyStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: any\n      // FIXME[HARD]: CORRECT TYPE; saveProfile is not any\n     // its important that we use the Thunk here as Promise but we might want to refactor this shit anyway;\n    // its simply bad UX to change your profile data by submitting a multiple line form;\n}\n\nconst ProfileInfo: FC<PropsType> = ({profile,\n                                        status,\n                                        updateMyStatus,\n                                        isOwner,\n                                        savePhoto,\n                                        saveProfile}) => {\n\n    let [editMode, setEditMode] = useState(false);\n\n    if (!profile) { return <Preloader/> }\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files) { savePhoto(e.target.files[0]); }\n    }\n\n    const onSubmit = (formData: ProfileType) => {\n        saveProfile(formData).then(() => setEditMode(false));\n    }\n\n    return (\n        <div>\n            <div className={classes.descriptionBlock}>\n                <div className={classes.imageSection}>\n                    <img src={profile.photos.large || userPhoto} className={classes.profileImage}/>\n                    <ProfileStatusWithHooks status={status} updateMyStatus={updateMyStatus}/>\n\n                    <div>\n                        { isOwner\n                            &&\n                            <div>\n                                <input type=\"file\" id=\"fileInput\" className={classes.editImgInput} onChange={onMainPhotoSelected}/>\n                                <label htmlFor=\"fileInput\" className={classes.editImgBtn}>Upload Image</label>\n                            </div>\n                        }\n                    </div>\n                </div>\n\n                <div>\n                    {editMode\n                        ? <ProfileDataReduxForm onSubmit={onSubmit} initialValues={profile} profile={profile}/>\n                        : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)}/>}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport const ProfileData = ({profile, isOwner, goToEditMode}) => {\n    return (\n        <div className={classes.profileDetailsSection}>\n\n            <h1>{profile.fullName}</h1>\n\n            <div>\n                <b>About me: </b> {profile.aboutMe || \"...\"}\n            </div>\n\n            <div>\n                <b>Looking for a job:</b> {profile.lookingForAJob ? \"Yes\" : \"No\"}\n            </div>\n\n            <div>\n                <b>My professional skills: </b> {profile.lookingForAJob ? profile.lookingForAJobDescription : \"\"}\n            </div>\n\n            <div>\n                <b>Contacts: </b> {Object.keys(profile.contacts).map(key  => {\n                return <Contact contactTitle={key} contactValue={profile.contacts[key]}/>\n            })}\n            </div>\n\n            {isOwner && <div>\n                <button className={classes.editBtn} onClick={goToEditMode}>Edit Profile</button>\n            </div>}\n        </div>\n    )\n}\n\n\nexport const Contact = ({contactTitle, contactValue}) => {\n    // MINI-COMPONENT\n    return <div className={classes.contactStyle}><b>{contactTitle}</b>: {contactValue} </div>\n}\n\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MyPosts_content__MJWFQ\",\"postsBlock\":\"MyPosts_postsBlock__lB-pf\",\"posts\":\"MyPosts_posts__GSiZ2\",\"addPostButton\":\"MyPosts_addPostButton__ubqZk\",\"reduxTextArea\":\"MyPosts_reduxTextArea__KPzQu\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Post_content__DFcK4\",\"item\":\"Post_item__Yu4oG\",\"message\":\"Post_message__tf0hV\",\"imageAndMessage\":\"Post_imageAndMessage__zqu-9\"};","import React, {FC} from \"react\";\nimport classes from './Post.module.css';\nimport {see} from \"../../../../utils/object-helpers\";\nimport {PostType} from \"../../../../types/types.ts\";\nimport userPhoto from \"../../../../assets/images/user.png\";\n\n\n\n\nconst Post: FC<PostType> = (props) => {\n\n    return (\n        <div>\n            <div className={classes.item}>\n                <div className={classes.imageAndMessage}>\n                    <img src={userPhoto} />\n                    <p className={classes.message}>{ props.message }</p>\n                </div>\n\n                <span> {props.likes} likes </span>\n            </div>\n        </div>\n    );\n}\n\nexport default Post;","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\nimport classes from \"../MyPosts.module.css\"\nimport React, {FC} from \"react\";\n\ntype PropsType = {\n    handleSubmit: () => void\n}\nconst AddNewPostForm: FC<InjectedFormProps<PropsType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea}\n                       name='newPostText'\n                       validate={[required, maxLengthCreator(25)]}\n                       placeholder=\"Enter your post\"\n                       className={classes.reduxTextArea}\n                />\n\n                <button className={classes.addPostButton}>Add Post</button>\n            </div>\n        </form>\n    );\n}\n\n// CONTAINER COMPONENT:\nconst AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);\n\nexport default AddNewPostFormRedux;","import React, {FC, NamedExoticComponent, PureComponent} from \"react\";\nimport classes from './MyPosts.module.css';\nimport Post from \"./Post/Post\";\nimport AddNewPostFormRedux from \"./AddNewPostForm/AddNewPostForm\";\nimport {see} from \"../../../utils/object-helpers.ts\";\nimport {PostsType, PostType} from \"../../../types/types.ts\";\nimport {useAppDispatch} from \"../../../redux/redux-store.ts\";\nimport {actions} from \"../../../redux/profile-reducer.ts\";\nimport {useSelector} from \"react-redux\";\n\nimport {getNewPostText, getPosts} from \"../../../redux/selectors/selectors.ts\";\nconst {addPostActionCreator} = actions;\n\ntype AddPostType = (newPostText: string) => void\n\nconst MyPosts: FC = React.memo(props => {\n    const dispatch = useAppDispatch();\n\n    // SELECTORS:\n    const posts = useSelector(getPosts);\n    const newPostText = useSelector(getNewPostText);\n\n    function addPost(newPostText) {\n        dispatch(addPostActionCreator(newPostText));\n    }\n\n    // mapping data\n    let myPosts =\n        posts.map(pst => <Post key={pst.id} message={pst.message} likes={pst.likesCount}/>)\n\n    let onAddPost = (values: any) => {\n        addPost(values.newPostText);\n        values.newPostText = ''; // nullifying text-area\n    };\n\n    return (\n        <div className={classes.postsBlock}>\n\n            <h3> My Posts </h3>\n\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n\n            <div className={classes.posts}>\n                {myPosts}\n            </div>\n        </div>\n    );\n\n});\n\n\nexport default MyPosts;","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__g-Lde\",\"container\":\"Profile_container__-cCQ9\"};","import React, {ComponentType, FC, useEffect} from \"react\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\n// import MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport {connect, useSelector} from \"react-redux\";\nimport {\n    getUser,\n    getUserStatus,\n    savePhoto,\n    saveProfile,\n    updateMyStatus\n} from \"../../redux/profile-reducer.ts\";\nimport {useAppDispatch} from \"../../redux/redux-store.ts\";\nimport {compose} from \"redux\";\nimport withRouter from \"../../hoc/withRouter.tsx\";\nimport withAuthRedirect from \"../../hoc/withAuthRedirect.tsx\";\nimport MyPosts from \"./MyPosts/MyPosts.tsx\";\nimport {HistoryRouterProps, MemoryRouterProps, RouterProviderProps} from \"react-router-dom\";\nimport {ProfileType} from \"../../types/types.ts\";\nimport {getAuthorizedUserId, getProfile, getStatus} from \"../../redux/selectors/selectors.ts\";\nimport classes from './Profile.module.css';\n\n\n\ntype PropsType = {\n    router?: any  // FIXME[HARD]: CORRECT TYPE; We might want to refactor this. There has to be a certain hook for this task;\n}\n\nconst ProfilePage: FC<PropsType> = (props) => {\n    const dispatch = useAppDispatch()\n    function checkOwner (authorizedUserId: number, displayedUser: number){\n        // CHECKS IF THE DISPLAYED PROFILE MATCHES THE LOGIN PROFILE\n        if (!displayedUser) { displayedUser = authorizedUserId; }\n        return authorizedUserId === displayedUser; // returns true/false\n    }\n    function refreshProfile() {\n        let userId = props.router.params.userId;\n        if (!userId) { userId = authorizedUserId } // my number: 30097\n        // CALLING 2 THUNKS (when the component mounts):\n        dispatch(getUser(userId));\n        dispatch(getUserStatus(userId));\n    }\n\n    // SELECTORS\n    const profile = useSelector(getProfile);\n    const authorizedUserId = useSelector(getAuthorizedUserId);\n    const status = useSelector(getStatus);\n    const displayedUser = props.router.params.userId;\n    const isOwner = checkOwner(authorizedUserId, displayedUser);\n\n    useEffect( () => {\n        refreshProfile()\n    }, [])\n\n    return (\n        <div className={classes.container}>\n            <ProfileInfo profile={profile}\n                         isOwner={isOwner}\n                         status={status}\n                         saveProfile={saveProfile}\n                         updateMyStatus={updateMyStatus}\n                         savePhoto={savePhoto}\n            />\n            <MyPosts />\n        </div>\n    );\n}\n\nexport default compose<ComponentType>(\n    // 􀄨\n    withRouter,                                    // KONVEIER 2\n    // 􀄨\n    withAuthRedirect,                              // KONVEIER 1\n    // 􀄨\n)(ProfilePage);"],"names":["props","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","_jsxs","className","classes","children","_jsx","onDoubleClick","onBlur","updateMyStatus","onChange","e","currentTarget","value","ProfileDataReduxForm","reduxForm","form","_ref","handleSubmit","profile","error","onSubmit","createField","Input","type","Textarea","Object","keys","contacts","map","key","ProfileData","_ref2","isOwner","goToEditMode","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Contact","contactTitle","contactValue","onClick","_ref3","savePhoto","saveProfile","Preloader","src","photos","large","userPhoto","ProfileStatusWithHooks","id","target","files","htmlFor","formData","then","initialValues","message","likes","Field","component","name","validate","required","maxLengthCreator","placeholder","addPostActionCreator","actions","React","dispatch","useAppDispatch","posts","useSelector","getPosts","getNewPostText","myPosts","pst","Post","likesCount","AddNewPostFormRedux","values","newPostText","addPost","compose","withRouter","withAuthRedirect","getProfile","authorizedUserId","getAuthorizedUserId","getStatus","displayedUser","router","params","userId","checkOwner","getUser","getUserStatus","refreshProfile","ProfileInfo","MyPosts"],"sourceRoot":""}